{"version":3,"file":"4199.e4416211.iframe.bundle.js","mappings":";;;;;AA+GA","sources":["webpack://superset/./src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport rison from 'rison';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport Button from 'src/components/Button';\nimport {\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  getChartMetadataRegistry,\n  validateNonEmpty,\n  isValidExpression,\n  styled,\n  getColumnLabel,\n  withTheme,\n} from '@superset-ui/core';\nimport SelectControl from 'src/explore/components/controls/SelectControl';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport PopoverSection from 'src/components/PopoverSection';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport { FILTER_OPTIONS_LIMIT } from 'src/explore/constants';\nimport {\n  ANNOTATION_SOURCE_TYPES,\n  ANNOTATION_TYPES,\n  ANNOTATION_TYPES_METADATA,\n  DEFAULT_ANNOTATION_TYPE,\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES_METADATA,\n} from './AnnotationTypes';\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  showLabel: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func,\n};\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  showLabel: false,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {},\n};\n\nconst NotFoundContentWrapper = styled.div`\n  && > div:first-child {\n    padding-left: 0;\n    padding-right: 0;\n  }\n`;\n\nconst NotFoundContent = () => (\n  <NotFoundContentWrapper>\n    <EmptyStateSmall\n      title={t('No annotation layers')}\n      description={\n        <span>\n          {t('Add an annotation layer')}{' '}\n          <a\n            href=\"/annotationlayer/list\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {t('here')}\n          </a>\n          .\n        </span>\n      }\n      image=\"empty.svg\"\n    />\n  </NotFoundContentWrapper>\n);\n\nclass AnnotationLayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const {\n      name,\n      annotationType,\n      sourceType,\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      value,\n      overrides,\n      show,\n      showLabel,\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      vizType,\n    } = props;\n\n    // Only allow override whole time_range\n    if ('since' in overrides || 'until' in overrides) {\n      overrides.time_range = null;\n      delete overrides.since;\n      delete overrides.until;\n    }\n\n    // Check if annotationType is supported by this chart\n    const metadata = getChartMetadataRegistry().get(vizType);\n    const supportedAnnotationTypes = metadata?.supportedAnnotationTypes || [];\n    const validAnnotationType = supportedAnnotationTypes.includes(\n      annotationType,\n    )\n      ? annotationType\n      : supportedAnnotationTypes[0];\n\n    this.state = {\n      // base\n      name,\n      annotationType: validAnnotationType,\n      sourceType,\n      value,\n      overrides,\n      show,\n      showLabel,\n      // slice\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      // display\n      color: color || AUTOMATIC_COLOR,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      // refData\n      isNew: !name,\n      isLoadingOptions: true,\n      valueOptions: [],\n    };\n    this.submitAnnotation = this.submitAnnotation.bind(this);\n    this.deleteAnnotation = this.deleteAnnotation.bind(this);\n    this.applyAnnotation = this.applyAnnotation.bind(this);\n    this.fetchOptions = this.fetchOptions.bind(this);\n    this.handleAnnotationType = this.handleAnnotationType.bind(this);\n    this.handleAnnotationSourceType =\n      this.handleAnnotationSourceType.bind(this);\n    this.handleValue = this.handleValue.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n  }\n\n  componentDidMount() {\n    const { annotationType, sourceType, isLoadingOptions } = this.state;\n    this.fetchOptions(annotationType, sourceType, isLoadingOptions);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sourceType !== this.state.sourceType) {\n      this.fetchOptions(this.state.annotationType, this.state.sourceType, true);\n    }\n  }\n\n  getSupportedSourceTypes(annotationType) {\n    // Get vis types that can be source.\n    const sources = getChartMetadataRegistry()\n      .entries()\n      .filter(({ value: chartMetadata }) =>\n        chartMetadata.canBeAnnotationType(annotationType),\n      )\n      .map(({ key, value: chartMetadata }) => ({\n        value: key,\n        label: chartMetadata.name,\n      }));\n    // Prepend native source if applicable\n    if (ANNOTATION_TYPES_METADATA[annotationType]?.supportNativeSource) {\n      sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);\n    }\n    return sources;\n  }\n\n  isValidFormulaAnnotation(expression, annotationType) {\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return isValidExpression(expression);\n    }\n    return true;\n  }\n\n  isValidForm() {\n    const {\n      name,\n      annotationType,\n      sourceType,\n      value,\n      timeColumn,\n      intervalEndColumn,\n    } = this.state;\n    const errors = [\n      validateNonEmpty(name),\n      validateNonEmpty(annotationType),\n      validateNonEmpty(value),\n    ];\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {\n      if (annotationType === ANNOTATION_TYPES.EVENT) {\n        errors.push(validateNonEmpty(timeColumn));\n      }\n      if (annotationType === ANNOTATION_TYPES.INTERVAL) {\n        errors.push(validateNonEmpty(timeColumn));\n        errors.push(validateNonEmpty(intervalEndColumn));\n      }\n    }\n    errors.push(!this.isValidFormulaAnnotation(value, annotationType));\n    return !errors.filter(x => x).length;\n  }\n\n  handleAnnotationType(annotationType) {\n    this.setState({\n      annotationType,\n      sourceType: null,\n      value: null,\n    });\n  }\n\n  handleAnnotationSourceType(sourceType) {\n    const { sourceType: prevSourceType } = this.state;\n\n    if (prevSourceType !== sourceType) {\n      this.setState({ sourceType, value: null, isLoadingOptions: true });\n    }\n  }\n\n  handleValue(value) {\n    this.setState({\n      value,\n      descriptionColumns: [],\n      intervalEndColumn: null,\n      timeColumn: null,\n      titleColumn: null,\n      overrides: { time_range: null },\n    });\n  }\n\n  fetchOptions(annotationType, sourceType, isLoadingOptions) {\n    if (isLoadingOptions) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        const queryParams = rison.encode({\n          page: 0,\n          page_size: FILTER_OPTIONS_LIMIT,\n        });\n        SupersetClient.get({\n          endpoint: `/api/v1/annotation_layer/?q=${queryParams}`,\n        }).then(({ json }) => {\n          const layers = json\n            ? json.result.map(layer => ({\n                value: layer.id,\n                label: layer.name,\n              }))\n            : [];\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: layers,\n          });\n        });\n      } else if (requiresQuery(sourceType)) {\n        const queryParams = rison.encode({\n          filters: [\n            {\n              col: 'id',\n              opr: 'chart_owned_created_favored_by_me',\n              value: true,\n            },\n          ],\n          order_column: 'slice_name',\n          order_direction: 'asc',\n          page: 0,\n          page_size: FILTER_OPTIONS_LIMIT,\n        });\n        SupersetClient.get({\n          endpoint: `/api/v1/chart/?q=${queryParams}`,\n        }).then(({ json }) => {\n          const registry = getChartMetadataRegistry();\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: json.result\n              .filter(x => {\n                const metadata = registry.get(x.viz_type);\n                return metadata && metadata.canBeAnnotationType(annotationType);\n              })\n              .map(x => ({\n                value: x.id,\n                label: x.slice_name,\n                slice: {\n                  ...x,\n                  data: {\n                    ...x.form_data,\n                    groupby: x.form_data.groupby?.map(column =>\n                      getColumnLabel(column),\n                    ),\n                  },\n                },\n              })),\n          });\n        });\n      } else {\n        this.setState({\n          isLoadingOptions: false,\n          valueOptions: [],\n        });\n      }\n    }\n  }\n\n  deleteAnnotation() {\n    this.props.removeAnnotationLayer();\n    this.props.close();\n  }\n\n  applyAnnotation() {\n    if (this.isValidForm()) {\n      const annotationFields = [\n        'name',\n        'annotationType',\n        'sourceType',\n        'color',\n        'opacity',\n        'style',\n        'width',\n        'showMarkers',\n        'hideLine',\n        'value',\n        'overrides',\n        'show',\n        'showLabel',\n        'titleColumn',\n        'descriptionColumns',\n        'timeColumn',\n        'intervalEndColumn',\n      ];\n      const newAnnotation = {};\n      annotationFields.forEach(field => {\n        if (this.state[field] !== null) {\n          newAnnotation[field] = this.state[field];\n        }\n      });\n\n      if (newAnnotation.color === AUTOMATIC_COLOR) {\n        newAnnotation.color = null;\n      }\n\n      this.props.addAnnotationLayer(newAnnotation);\n      this.setState({ isNew: false });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderOption(option) {\n    return (\n      <span\n        css={{\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          whiteSpace: 'nowrap',\n        }}\n        title={option.label}\n      >\n        {option.label}\n      </span>\n    );\n  }\n\n  renderValueConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      isLoadingOptions,\n    } = this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = t('Annotation layer');\n        description = t('Select the Annotation Layer you would like to use.');\n      } else {\n        label = t('Chart');\n        description = t(\n          `Use another existing chart as a source for annotations and overlays.\n          Your chart must be one of these visualization types: [%s]`,\n          this.getSupportedSourceTypes(annotationType)\n            .map(x => x.label)\n            .join(', '),\n        );\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = t('Formula');\n      description = t(`Expects a formula with depending time parameter 'x'\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\n        Example: '2x+5'`);\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        <SelectControl\n          ariaLabel={t('Annotation layer value')}\n          name=\"annotation-layer-value\"\n          showHeader\n          hovered\n          description={description}\n          label={label}\n          placeholder=\"\"\n          options={valueOptions}\n          isLoading={isLoadingOptions}\n          value={value}\n          onChange={this.handleValue}\n          validationErrors={!value ? ['Mandatory'] : []}\n          optionRenderer={this.renderOption}\n          notFoundContent={<NotFoundContent />}\n        />\n      );\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        <TextControl\n          name=\"annotation-layer-value\"\n          hovered\n          showHeader\n          description={description}\n          label={label}\n          placeholder=\"\"\n          value={value}\n          onChange={this.handleValue}\n          validationErrors={\n            !this.isValidFormulaAnnotation(value, annotationType)\n              ? [t('Bad formula.')]\n              : []\n          }\n        />\n      );\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns,\n    } = this.state;\n    const { slice } = valueOptions.find(x => x.value === value) || {};\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {\n      const columns = (slice.data.groupby || [])\n        .concat(slice.data.all_columns || [])\n        .map(x => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time\n        ? [{ value: '__timestamp', label: '__timestamp' }].concat(columns)\n        : columns;\n      return (\n        <div style={{ marginRight: '2rem' }}>\n          <PopoverSection\n            isSelected\n            title={t('Annotation Slice Configuration')}\n            info={t(`This section allows you to configure how to use the slice\n              to generate annotations.`)}\n          >\n            {(annotationType === ANNOTATION_TYPES.EVENT ||\n              annotationType === ANNOTATION_TYPES.INTERVAL) && (\n              <SelectControl\n                ariaLabel={t('Annotation layer time column')}\n                hovered\n                name=\"annotation-layer-time-column\"\n                label={\n                  annotationType === ANNOTATION_TYPES.INTERVAL\n                    ? t('Interval start column')\n                    : t('Event time column')\n                }\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!timeColumn ? ['Mandatory'] : []}\n                clearable={false}\n                options={timeColumnOptions}\n                value={timeColumn}\n                onChange={v => this.setState({ timeColumn: v })}\n              />\n            )}\n            {annotationType === ANNOTATION_TYPES.INTERVAL && (\n              <SelectControl\n                ariaLabel={t('Annotation layer interval end')}\n                hovered\n                name=\"annotation-layer-intervalEnd\"\n                label={t('Interval End column')}\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!intervalEndColumn ? ['Mandatory'] : []}\n                options={columns}\n                value={intervalEndColumn}\n                onChange={value => this.setState({ intervalEndColumn: value })}\n              />\n            )}\n            <SelectControl\n              ariaLabel={t('Annotation layer title column')}\n              hovered\n              name=\"annotation-layer-title\"\n              label={t('Title Column')}\n              description={t('Pick a title for you annotation.')}\n              options={[{ value: '', label: t('None') }].concat(columns)}\n              value={titleColumn}\n              onChange={value => this.setState({ titleColumn: value })}\n            />\n            {annotationType !== ANNOTATION_TYPES.TIME_SERIES && (\n              <SelectControl\n                ariaLabel={t('Annotation layer description columns')}\n                hovered\n                name=\"annotation-layer-title\"\n                label={t('Description Columns')}\n                description={t(\n                  \"Pick one or more columns that should be shown in the annotation. If you don't select a column all of them will be shown.\",\n                )}\n                multi\n                options={columns}\n                value={descriptionColumns}\n                onChange={value => this.setState({ descriptionColumns: value })}\n              />\n            )}\n            <div style={{ marginTop: '1rem' }}>\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-time_range\"\n                label={t('Override time range')}\n                description={t(`This controls whether the \"time_range\" field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_range' in overrides}\n                onChange={v => {\n                  delete overrides.time_range;\n                  if (v) {\n                    this.setState({\n                      overrides: { ...overrides, time_range: null },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-timegrain\"\n                label={t('Override time grain')}\n                description={t(`This controls whether the time grain field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_grain_sqla' in overrides}\n                onChange={v => {\n                  delete overrides.time_grain_sqla;\n                  delete overrides.granularity;\n                  if (v) {\n                    this.setState({\n                      overrides: {\n                        ...overrides,\n                        time_grain_sqla: null,\n                        granularity: null,\n                      },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <TextControl\n                hovered\n                name=\"annotation-layer-timeshift\"\n                label={t('Time Shift')}\n                description={t(`Time delta in natural language\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)`)}\n                placeholder=\"\"\n                value={overrides.time_shift}\n                onChange={v =>\n                  this.setState({ overrides: { ...overrides, time_shift: v } })\n                }\n              />\n            </div>\n          </PopoverSection>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType,\n    } = this.state;\n    const colorScheme = getCategoricalSchemeRegistry()\n      .get(this.props.colorScheme)\n      .colors.concat();\n    if (\n      color &&\n      color !== AUTOMATIC_COLOR &&\n      !colorScheme.find(x => x.toLowerCase() === color.toLowerCase())\n    ) {\n      colorScheme.push(color);\n    }\n    return (\n      <PopoverSection\n        isSelected\n        title={t('Display configuration')}\n        info={t('Configure your how you overlay is displayed here.')}\n      >\n        <SelectControl\n          ariaLabel={t('Annotation layer stroke')}\n          name=\"annotation-layer-stroke\"\n          label={t('Style')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: 'solid', label: t('Solid') },\n            { value: 'dashed', label: t('Dashed') },\n            { value: 'longDashed', label: t('Long dashed') },\n            { value: 'dotted', label: t('Dotted') },\n          ]}\n          value={style}\n          clearable={false}\n          onChange={v => this.setState({ style: v })}\n        />\n        <SelectControl\n          ariaLabel={t('Annotation layer opacity')}\n          name=\"annotation-layer-opacity\"\n          label={t('Opacity')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: '', label: t('Solid') },\n            { value: 'opacityLow', label: '0.2' },\n            { value: 'opacityMedium', label: '0.5' },\n            { value: 'opacityHigh', label: '0.8' },\n          ]}\n          value={opacity}\n          onChange={value => this.setState({ opacity: value })}\n        />\n        <div>\n          <ControlHeader label={t('Color')} />\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <CompactPicker\n              color={color}\n              colors={colorScheme}\n              onChangeComplete={v => this.setState({ color: v.hex })}\n            />\n            <Button\n              style={{ marginTop: '0.5rem', marginBottom: '0.5rem' }}\n              buttonStyle={color === AUTOMATIC_COLOR ? 'success' : 'default'}\n              buttonSize=\"xsmall\"\n              onClick={() => this.setState({ color: AUTOMATIC_COLOR })}\n            >\n              {t('Automatic Color')}\n            </Button>\n          </div>\n        </div>\n        <TextControl\n          name=\"annotation-layer-stroke-width\"\n          label={t('Line width')}\n          isInt\n          value={width}\n          onChange={v => this.setState({ width: v })}\n        />\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-show-markers\"\n            label={t('Show Markers')}\n            description={t('Shows or hides markers for the time series')}\n            value={showMarkers}\n            onChange={v => this.setState({ showMarkers: v })}\n          />\n        )}\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-hide-line\"\n            label={t('Hide Line')}\n            description={t('Hides the Line for the time series')}\n            value={hideLine}\n            onChange={v => this.setState({ hideLine: v })}\n          />\n        )}\n      </PopoverSection>\n    );\n  }\n\n  render() {\n    const { isNew, name, annotationType, sourceType, show, showLabel } =\n      this.state;\n    const isValid = this.isValidForm();\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata\n      ? metadata.supportedAnnotationTypes.map(\n          type => ANNOTATION_TYPES_METADATA[type],\n        )\n      : [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      <>\n        {this.props.error && (\n          <span style={{ color: this.props.theme.colors.error.base }}>\n            ERROR: {this.props.error}\n          </span>\n        )}\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ marginRight: '2rem' }}>\n            <PopoverSection\n              isSelected\n              title={t('Layer configuration')}\n              info={t('Configure the basics of your Annotation Layer.')}\n            >\n              <TextControl\n                name=\"annotation-layer-name\"\n                label={t('Name')}\n                placeholder=\"\"\n                value={name}\n                onChange={v => this.setState({ name: v })}\n                validationErrors={!name ? [t('Mandatory')] : []}\n              />\n              <CheckboxControl\n                name=\"annotation-layer-hide\"\n                label={t('Hide layer')}\n                value={!show}\n                onChange={v => this.setState({ show: !v })}\n              />\n              <CheckboxControl\n                name=\"annotation-label-show\"\n                label={t('Show label')}\n                value={showLabel}\n                hovered\n                description={t('Whether to always show the annotation label')}\n                onChange={v => this.setState({ showLabel: v })}\n              />\n              <SelectControl\n                ariaLabel={t('Annotation layer type')}\n                hovered\n                description={t('Choose the annotation layer type')}\n                label={t('Annotation layer type')}\n                name=\"annotation-layer-type\"\n                clearable={false}\n                options={supportedAnnotationTypes}\n                value={annotationType}\n                onChange={this.handleAnnotationType}\n              />\n              {supportedSourceTypes.length > 0 && (\n                <SelectControl\n                  ariaLabel={t('Annotation source type')}\n                  hovered\n                  description={t('Choose the source of your annotations')}\n                  label={t('Annotation source')}\n                  name=\"annotation-source-type\"\n                  options={supportedSourceTypes}\n                  notFoundContent={<NotFoundContent />}\n                  value={sourceType}\n                  onChange={this.handleAnnotationSourceType}\n                  validationErrors={!sourceType ? [t('Mandatory')] : []}\n                />\n              )}\n              {this.renderValueConfiguration()}\n            </PopoverSection>\n          </div>\n          {this.renderSliceConfiguration()}\n          {this.renderDisplayConfiguration()}\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          {isNew ? (\n            <Button buttonSize=\"small\" onClick={() => this.props.close()}>\n              {t('Cancel')}\n            </Button>\n          ) : (\n            <Button buttonSize=\"small\" onClick={this.deleteAnnotation}>\n              {t('Remove')}\n            </Button>\n          )}\n          <div>\n            <Button\n              buttonSize=\"small\"\n              disabled={!isValid}\n              onClick={this.applyAnnotation}\n            >\n              {t('Apply')}\n            </Button>\n\n            <Button\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              disabled={!isValid}\n              onClick={this.submitAnnotation}\n            >\n              {t('OK')}\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;\n\nexport default withTheme(AnnotationLayer);\n"],"names":[],"sourceRoot":""}